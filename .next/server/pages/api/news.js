"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/news";
exports.ids = ["pages/api/news"];
exports.modules = {

/***/ "fs-extra":
/*!***************************!*\
  !*** external "fs-extra" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("fs-extra");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("sqlite3");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fnews&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fnews%2Findex.js&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fnews&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fnews%2Findex.js&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_news_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/news/index.js */ \"(api)/./pages/api/news/index.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_news_index_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_news_index_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/news\",\n        pathname: \"/api/news\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_news_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRm5ld3MmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRm5ld3MlMkZpbmRleC5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNzRDtBQUN0RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMscURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHFEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL211c2xpbS1uZXdzLWFnZ3JlZ2F0b3IvPzE1NjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9uZXdzL2luZGV4LmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbmV3c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL25ld3NcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fnews&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fnews%2Findex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/data/seed-articles.js":
/*!***********************************!*\
  !*** ./lib/data/seed-articles.js ***!
  \***********************************/
/***/ ((module) => {

eval("// Sample Islamic news articles to seed the database\n// This ensures the website always has content even when scraping fails\n\nconst SEED_ARTICLES = [\n    {\n        id: 1,\n        title: \"New Islamic Center Opens in Downtown Area to Serve Growing Muslim Community\",\n        content: `A state-of-the-art Islamic center has officially opened its doors in the downtown area, marking a significant milestone for the local Muslim community. The 15,000 square foot facility features a main prayer hall that can accommodate up to 800 worshippers, separate prayer areas for men and women, and dedicated spaces for educational programs.\n\nThe center, which took three years to complete, was funded entirely through community donations and represents the collective effort of over 500 Muslim families in the region. \"This center is not just a place of worship, but a hub for community engagement, education, and interfaith dialogue,\" said Imam Abdullah Rahman, who will serve as the center's spiritual leader.\n\nThe facility includes a library with Islamic texts in multiple languages, classrooms for weekend Islamic school programs, and a community hall for events and gatherings. The center also plans to offer Arabic language classes, Quran study circles, and youth programs to serve the diverse needs of the Muslim community.\n\nLocal officials attended the opening ceremony, emphasizing the importance of religious diversity and community inclusion. The mayor praised the Muslim community's contributions to the city and welcomed the new center as a valuable addition to the neighborhood.\n\nThe Islamic center will also serve as a resource for interfaith understanding, with plans to host open houses and educational events for the broader community.`,\n        summary: \"A new Islamic center opens downtown with facilities for 800 worshippers, educational programs, and community engagement activities, funded by local Muslim families.\",\n        url: \"https://muslimhub.com/news/new-islamic-center-opens-downtown\",\n        imageUrl: \"https://images.unsplash.com/photo-1564769662454-4915344f0e07?w=800\",\n        category: \"Community\",\n        publishedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Muslim Community News\",\n        sourceUrl: \"https://muslimhub.com\",\n        sourceRegion: \"North America\",\n        sourceLogo: null,\n        importance: 7,\n        countries: JSON.stringify([\n            \"United States\"\n        ]),\n        tags: JSON.stringify([\n            \"community\",\n            \"mosque\",\n            \"islamic center\",\n            \"interfaith\"\n        ])\n    },\n    {\n        id: 2,\n        title: \"International Conference on Islamic Finance Concludes with New Global Standards\",\n        content: `The 15th International Conference on Islamic Finance concluded in Dubai with the announcement of new global standards for Sharia-compliant banking and investment practices. Over 500 delegates from 40 countries participated in the three-day conference, which focused on sustainable finance, fintech innovations, and regulatory frameworks.\n\nThe conference, organized by the Islamic Development Bank and the UAE Central Bank, brought together leading Islamic finance scholars, banking executives, and regulatory officials to discuss the future of the industry. Key topics included the integration of environmental, social, and governance (ESG) principles with Islamic finance, the role of technology in enhancing Sharia compliance, and strategies for expanding Islamic finance to new markets.\n\nDr. Fatima Al-Zahra, a prominent Islamic finance scholar, presented research showing that Islamic banks have demonstrated greater resilience during economic downturns compared to conventional banks. \"The principles of risk-sharing and asset-backing inherent in Islamic finance provide natural stability mechanisms,\" she explained.\n\nThe conference also featured the launch of several new financial products, including green sukuk (Islamic bonds) for renewable energy projects and digital Islamic banking platforms designed to serve younger Muslim consumers. Industry leaders emphasized the importance of innovation while maintaining strict adherence to Islamic principles.\n\nThe final declaration called for increased cooperation between Islamic financial institutions globally and the development of standardized training programs for Islamic finance professionals.`,\n        summary: \"The International Conference on Islamic Finance in Dubai sets new global standards for Sharia-compliant banking, with focus on sustainability and fintech innovations.\",\n        url: \"https://islamicfinancetoday.com/conference-2024-dubai\",\n        imageUrl: \"https://images.unsplash.com/photo-1559526324-4b87b5e36e44?w=800\",\n        category: \"Economics\",\n        publishedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Islamic Finance Today\",\n        sourceUrl: \"https://islamicfinancetoday.com\",\n        sourceRegion: \"Middle East\",\n        sourceLogo: null,\n        importance: 8,\n        countries: JSON.stringify([\n            \"UAE\",\n            \"Global\"\n        ]),\n        tags: JSON.stringify([\n            \"islamic finance\",\n            \"banking\",\n            \"sharia compliance\",\n            \"dubai\",\n            \"conference\"\n        ])\n    },\n    {\n        id: 3,\n        title: \"Young Muslim Inventor Wins International Science Award for Clean Water Innovation\",\n        content: `Aisha Mohammad, a 17-year-old Muslim student from Bangladesh, has won the prestigious International Young Scientist Award for her innovative water purification system that uses locally available materials to provide clean drinking water to rural communities.\n\nHer invention, called \"AquaPure,\" combines traditional Islamic scientific principles with modern engineering to create an affordable filtration system that can purify contaminated water using clay, sand, and activated charcoal. The system can produce up to 20 liters of clean water per hour and costs less than $50 to build.\n\n\"I was inspired by the Islamic principle that access to clean water is a fundamental human right,\" said Aisha during the award ceremony in Stockholm. \"I wanted to create something that could help communities in my country and around the world have access to safe drinking water.\"\n\nThe young inventor's work has already been implemented in 15 villages across Bangladesh, benefiting over 3,000 people. International NGOs have expressed interest in scaling the technology to other developing countries facing water scarcity issues.\n\nAisha's achievement has been celebrated throughout the Muslim world, with Islamic scholars praising her work as an example of how Islamic values of helping others can drive scientific innovation. She plans to use her prize money to further develop the technology and establish a foundation to provide clean water solutions to disadvantaged communities.\n\nThe award committee noted that Aisha's invention represents the perfect blend of traditional knowledge and modern science, embodying the Islamic emphasis on beneficial knowledge ('ilm nafi') that serves humanity.`,\n        summary: \"17-year-old Muslim inventor from Bangladesh wins international award for innovative water purification system that serves rural communities using Islamic scientific principles.\",\n        url: \"https://muslimscientists.org/young-inventor-water-award\",\n        imageUrl: \"https://images.unsplash.com/photo-1582719471384-894fbb16e074?w=800\",\n        category: \"Technology\",\n        publishedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Muslim Scientists Network\",\n        sourceUrl: \"https://muslimscientists.org\",\n        sourceRegion: \"Asia\",\n        sourceLogo: null,\n        importance: 9,\n        countries: JSON.stringify([\n            \"Bangladesh\",\n            \"Sweden\"\n        ]),\n        tags: JSON.stringify([\n            \"innovation\",\n            \"science\",\n            \"water\",\n            \"youth\",\n            \"award\",\n            \"technology\"\n        ])\n    },\n    {\n        id: 4,\n        title: \"Ramadan Food Distribution Program Reaches Record Numbers in Major Cities\",\n        content: `Muslim organizations across major cities have reported record-breaking participation in their Ramadan food distribution programs, with over 2 million meals provided to families in need during the holy month. The programs, coordinated by local mosques and Islamic charities, have expanded significantly compared to previous years.\n\nIn New York City alone, the Islamic Society has distributed over 150,000 meals to both Muslim and non-Muslim families facing food insecurity. \"The spirit of Ramadan is about compassion and helping those in need, regardless of their faith,\" explained Dr. Omar Hassan, director of the city's largest Islamic charity.\n\nThe programs have received support from local governments and interfaith organizations, highlighting the positive impact of Muslim community engagement. Volunteers from various backgrounds have joined the effort, creating opportunities for cross-community collaboration and understanding.\n\nIn London, the Islamic Council has partnered with food banks and homeless shelters to ensure that nutritious meals reach the most vulnerable populations. The program includes both traditional iftar meals for breaking the fast and regular food packages for families throughout the month.\n\nSimilar initiatives in Detroit, Toronto, Sydney, and other cities with significant Muslim populations have seen unprecedented community support. Many programs have also adapted to serve communities affected by economic challenges, natural disasters, and global conflicts.\n\nThe success of these programs has been attributed to increased community organization, social media outreach, and growing awareness of the Islamic principle of Zakat (charitable giving) among younger Muslims.`,\n        summary: \"Muslim organizations worldwide distribute record 2 million meals during Ramadan, partnering with local governments and interfaith groups to serve communities in need.\",\n        url: \"https://islamiccharity.org/ramadan-food-distribution-2024\",\n        imageUrl: \"https://images.unsplash.com/photo-1593113616828-6f22bca04804?w=800\",\n        category: \"Community\",\n        publishedAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Islamic Charity Network\",\n        sourceUrl: \"https://islamiccharity.org\",\n        sourceRegion: \"Global\",\n        sourceLogo: null,\n        importance: 8,\n        countries: JSON.stringify([\n            \"United States\",\n            \"United Kingdom\",\n            \"Canada\",\n            \"Australia\"\n        ]),\n        tags: JSON.stringify([\n            \"ramadan\",\n            \"charity\",\n            \"food distribution\",\n            \"community service\",\n            \"interfaith\"\n        ])\n    },\n    {\n        id: 5,\n        title: \"Historic Manuscript Collection Digitized to Preserve Islamic Heritage\",\n        content: `A major digitization project has successfully preserved over 10,000 historic Islamic manuscripts, making them accessible to researchers and students worldwide through an online portal. The three-year project, funded by UNESCO and several Islamic foundations, focused on manuscripts from libraries in Cairo, Istanbul, Cordoba, and Baghdad.\n\nThe collection includes rare works on Islamic jurisprudence, philosophy, medicine, astronomy, and mathematics dating from the 8th to 16th centuries. Many of these manuscripts were previously accessible only to a small number of scholars and were at risk of deterioration due to age and environmental factors.\n\nDr. Leila Boumediene, the project's lead coordinator, emphasized the global significance of the initiative: \"These manuscripts represent the intellectual legacy of Islamic civilization and contain knowledge that contributed to human advancement in countless fields. By digitizing them, we ensure that future generations can access and learn from this invaluable heritage.\"\n\nThe digitization process involved high-resolution scanning, detailed cataloging, and the creation of searchable databases in multiple languages. Advanced preservation techniques were used to handle the delicate manuscripts while creating digital copies that maintain the original documents' visual and textual integrity.\n\nScholars have already begun using the digital collection for research projects, discovering new insights into medieval Islamic thought and its influence on global intellectual development. The portal includes translation tools and scholarly annotations to make the texts accessible to non-Arabic speakers.\n\nThe project has been praised by international academic institutions and has sparked renewed interest in Islamic studies programs at universities worldwide.`,\n        summary: \"UNESCO-funded project digitizes 10,000 historic Islamic manuscripts from major libraries, making invaluable Islamic heritage accessible to global researchers and students.\",\n        url: \"https://islamicheritage.org/manuscript-digitization-complete\",\n        imageUrl: \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=800\",\n        category: \"Culture\",\n        publishedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Islamic Heritage Foundation\",\n        sourceUrl: \"https://islamicheritage.org\",\n        sourceRegion: \"Global\",\n        sourceLogo: null,\n        importance: 9,\n        countries: JSON.stringify([\n            \"Egypt\",\n            \"Turkey\",\n            \"Spain\",\n            \"Iraq\"\n        ]),\n        tags: JSON.stringify([\n            \"heritage\",\n            \"manuscripts\",\n            \"digitization\",\n            \"unesco\",\n            \"culture\",\n            \"preservation\"\n        ])\n    },\n    {\n        id: 6,\n        title: \"Muslim Medical Association Launches Global Health Initiative for Underserved Communities\",\n        content: `The International Muslim Medical Association has launched a comprehensive global health initiative aimed at providing medical care and health education to underserved Muslim communities worldwide. The program, called \"Health for All,\" will establish medical clinics, training centers, and mobile health units in 25 countries over the next five years.\n\nThe initiative addresses critical health disparities affecting Muslim populations in refugee camps, rural areas, and urban centers lacking adequate healthcare infrastructure. The program emphasizes preventive care, maternal health, child nutrition, and the treatment of communicable diseases.\n\nDr. Fatima Al-Rashid, the association's president, announced that the first phase will focus on establishing permanent clinics in refugee settlements in Jordan, Lebanon, and Bangladesh, serving over 100,000 displaced persons. \"Healthcare is a fundamental human right in Islam, and we have a religious obligation to serve those most in need,\" she stated.\n\nThe program incorporates Islamic principles of healthcare, including the integration of spiritual care with medical treatment and the training of local community health workers. It also emphasizes the importance of culturally sensitive care that respects Islamic values and practices.\n\nFunding for the initiative comes from Zakat contributions, Islamic charitable foundations, and partnerships with international health organizations. The World Health Organization has endorsed the program and provided technical support for its implementation.\n\nMedical professionals from around the world have volunteered to participate, with over 500 Muslim doctors, nurses, and healthcare workers already registered to serve in various locations.`,\n        summary: \"International Muslim Medical Association launches global health initiative to serve underserved communities, establishing clinics in 25 countries with focus on refugee populations.\",\n        url: \"https://muslimmedics.org/global-health-initiative-launch\",\n        imageUrl: \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=800\",\n        category: \"Health\",\n        publishedAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Muslim Medical Today\",\n        sourceUrl: \"https://muslimmedics.org\",\n        sourceRegion: \"Global\",\n        sourceLogo: null,\n        importance: 8,\n        countries: JSON.stringify([\n            \"Jordan\",\n            \"Lebanon\",\n            \"Bangladesh\",\n            \"Global\"\n        ]),\n        tags: JSON.stringify([\n            \"healthcare\",\n            \"medical\",\n            \"charity\",\n            \"refugees\",\n            \"global health\",\n            \"muslim doctors\"\n        ])\n    },\n    {\n        id: 7,\n        title: \"Islamic Art Exhibition Breaks Attendance Records at Metropolitan Museum\",\n        content: `The Metropolitan Museum of Art's groundbreaking exhibition \"Islamic Civilizations: Art, Science, and Culture\" has broken attendance records, with over 500,000 visitors in its first six months. The exhibition, which runs until the end of the year, showcases 1,000 years of Islamic artistic and intellectual achievement.\n\nThe exhibition features over 300 objects from the museum's collection and loans from institutions worldwide, including calligraphy, textiles, scientific instruments, architectural elements, and illuminated manuscripts. Interactive displays allow visitors to explore the connections between Islamic art and contemporary creative expressions.\n\n\"This exhibition challenges many misconceptions about Islamic culture and highlights its profound contributions to world civilization,\" said Dr. Sarah Ahmed, the exhibition's chief curator. \"Visitors are amazed to learn about the Islamic roots of many scientific and artistic innovations we take for granted today.\"\n\nThe exhibition has been particularly popular among school groups, with special educational programs designed to teach students about Islamic contributions to mathematics, astronomy, medicine, and architecture. Many visitors have expressed surprise at the diversity and sophistication of Islamic artistic traditions.\n\nCommunity response has been overwhelmingly positive, with Muslim organizations praising the respectful and comprehensive presentation of Islamic culture. The exhibition has also fostered increased dialogue between Muslim and non-Muslim communities in New York.\n\nPlans are underway to create a traveling version of the exhibition that will visit museums across the United States and internationally, extending its educational impact to broader audiences.`,\n        summary: \"Metropolitan Museum's Islamic art exhibition breaks attendance records with 500,000 visitors, showcasing 1,000 years of Islamic artistic and intellectual contributions.\",\n        url: \"https://artandislam.org/met-exhibition-success\",\n        imageUrl: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=800\",\n        category: \"Culture\",\n        publishedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Art & Islam Today\",\n        sourceUrl: \"https://artandislam.org\",\n        sourceRegion: \"North America\",\n        sourceLogo: null,\n        importance: 7,\n        countries: JSON.stringify([\n            \"United States\"\n        ]),\n        tags: JSON.stringify([\n            \"art\",\n            \"exhibition\",\n            \"culture\",\n            \"museum\",\n            \"education\",\n            \"islamic civilization\"\n        ])\n    },\n    {\n        id: 8,\n        title: \"Muslim Student Athletes Excel in International University Games\",\n        content: `Muslim student athletes from around the world have achieved remarkable success at the International University Games, winning medals across multiple sports while maintaining their religious practices and obligations. The games, held in Italy, featured over 8,000 athletes from 165 countries.\n\nNotable achievements include gold medals won by Zeinab Hassan (Egypt) in taekwondo, Ahmed Al-Mansouri (UAE) in swimming, and the Malaysian women's badminton team. These athletes have become role models for young Muslims, demonstrating that excellence in sports is compatible with Islamic values and practices.\n\nThe games featured special accommodations for Muslim athletes, including prayer facilities, halal food options, and adjusted training schedules during prayer times. This inclusive approach has been praised by the International University Sports Federation and has set a precedent for future international sporting events.\n\n\"Representing my country and my faith on this international stage is an incredible honor,\" said gold medalist Zeinab Hassan. \"I hope to inspire other young Muslim women to pursue their dreams in sports while staying true to their beliefs and values.\"\n\nThe success of Muslim athletes has been celebrated across the Islamic world, with many receiving hero's welcomes upon returning to their home countries. Sports commentators have noted the increasing visibility and success of Muslim athletes in international competitions.\n\nSeveral athletes have announced plans to use their platforms to promote youth sports programs in their communities and to advocate for greater inclusion and understanding in international sports.`,\n        summary: \"Muslim student athletes achieve remarkable success at International University Games, winning multiple medals while maintaining religious practices and inspiring youth.\",\n        url: \"https://muslimathletesnews.com/university-games-success\",\n        imageUrl: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800\",\n        category: \"Sports\",\n        publishedAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),\n        scrapedAt: new Date().toISOString(),\n        sourceName: \"Muslim Athletes News\",\n        sourceUrl: \"https://muslimathletesnews.com\",\n        sourceRegion: \"Global\",\n        sourceLogo: null,\n        importance: 6,\n        countries: JSON.stringify([\n            \"Italy\",\n            \"Egypt\",\n            \"UAE\",\n            \"Malaysia\"\n        ]),\n        tags: JSON.stringify([\n            \"sports\",\n            \"athletes\",\n            \"university games\",\n            \"muslim youth\",\n            \"international competition\"\n        ])\n    }\n];\nmodule.exports = {\n    SEED_ARTICLES\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/data/seed-articles.js\n");

/***/ }),

/***/ "(api)/./lib/services/app-initializer.js":
/*!*****************************************!*\
  !*** ./lib/services/app-initializer.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst DatabaseSeeder = __webpack_require__(/*! ./database-seeder */ \"(api)/./lib/services/database-seeder.js\");\nconst { getDatabase } = __webpack_require__(/*! ./database */ \"(api)/./lib/services/database.js\");\nclass AppInitializer {\n    constructor(){\n        this.seeder = new DatabaseSeeder();\n        this.isInitialized = false;\n    }\n    /**\n   * Initialize the application with minimum required content\n   */ async initialize() {\n        if (this.isInitialized) {\n            return {\n                success: true,\n                message: \"Already initialized\"\n            };\n        }\n        try {\n            console.log(\"\\uD83D\\uDE80 Initializing Muslim News Hub...\");\n            // Step 1: Check database connection\n            console.log(\"\\uD83D\\uDCCA Checking database connection...\");\n            const db = getDatabase();\n            if (!db) {\n                throw new Error(\"Database connection failed\");\n            }\n            console.log(\"✅ Database connection successful\");\n            // Step 2: Check current content\n            const currentCount = await this.seeder.getArticleCount();\n            console.log(`📰 Current articles in database: ${currentCount}`);\n            // Step 3: Ensure minimum content\n            if (currentCount < 8) {\n                console.log(\"\\uD83C\\uDF31 Database needs initial content, seeding...\");\n                const seedResult = await this.seeder.ensureMinimumContent(8);\n                if (seedResult.success) {\n                    console.log(`✅ ${seedResult.message}`);\n                } else {\n                    console.log(`⚠️ Seeding had issues: ${seedResult.message}`);\n                }\n            } else {\n                console.log(\"✅ Database has sufficient content\");\n            }\n            // Step 4: Final verification\n            const finalCount = await this.seeder.getArticleCount();\n            console.log(`📈 Final article count: ${finalCount}`);\n            this.isInitialized = true;\n            return {\n                success: true,\n                message: `Muslim News Hub initialized successfully with ${finalCount} articles`,\n                articleCount: finalCount\n            };\n        } catch (error) {\n            console.error(\"❌ App initialization error:\", error);\n            // Emergency fallback\n            try {\n                console.log(\"\\uD83C\\uDD98 Emergency initialization attempt...\");\n                await this.seeder.forceSeed();\n                const emergencyCount = await this.seeder.getArticleCount();\n                this.isInitialized = true;\n                return {\n                    success: true,\n                    message: `Emergency initialization completed with ${emergencyCount} articles`,\n                    articleCount: emergencyCount,\n                    warning: \"Used emergency seeding\"\n                };\n            } catch (emergencyError) {\n                console.error(\"❌ Emergency initialization failed:\", emergencyError);\n                return {\n                    success: false,\n                    message: \"App initialization failed completely\",\n                    error: error.message,\n                    emergencyError: emergencyError.message\n                };\n            }\n        }\n    }\n    /**\n   * Check if app is properly initialized\n   */ async isAppReady() {\n        try {\n            const articleCount = await this.seeder.getArticleCount();\n            return {\n                ready: articleCount >= 5,\n                articleCount: articleCount,\n                message: articleCount >= 5 ? \"App is ready\" : \"App needs more content\"\n            };\n        } catch (error) {\n            return {\n                ready: false,\n                articleCount: 0,\n                message: \"Database connection error\",\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Refresh content (useful for periodic updates)\n   */ async refreshContent() {\n        try {\n            console.log(\"\\uD83D\\uDD04 Refreshing content...\");\n            const currentCount = await this.seeder.getArticleCount();\n            // If content is very low, force reseed\n            if (currentCount < 5) {\n                console.log(\"\\uD83C\\uDF31 Content is low, force reseeding...\");\n                const result = await this.seeder.forceSeed();\n                return {\n                    success: true,\n                    message: `Content refreshed: ${result.articlesAdded} articles added`,\n                    action: \"force_seed\"\n                };\n            }\n            // Otherwise, just ensure minimum\n            const result = await this.seeder.ensureMinimumContent(8);\n            return {\n                success: true,\n                message: result.message,\n                action: \"ensure_minimum\"\n            };\n        } catch (error) {\n            console.error(\"❌ Content refresh error:\", error);\n            return {\n                success: false,\n                message: \"Content refresh failed\",\n                error: error.message\n            };\n        }\n    }\n}\n// Export singleton instance\nconst appInitializer = new AppInitializer();\nmodule.exports = {\n    AppInitializer,\n    appInitializer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/services/app-initializer.js\n");

/***/ }),

/***/ "(api)/./lib/services/database-seeder.js":
/*!*****************************************!*\
  !*** ./lib/services/database-seeder.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { getDatabase } = __webpack_require__(/*! ./database */ \"(api)/./lib/services/database.js\");\nconst { SEED_ARTICLES } = __webpack_require__(/*! ../data/seed-articles */ \"(api)/./lib/data/seed-articles.js\");\nconst { contentFormatter } = __webpack_require__(/*! ../utils/contentFormatter */ \"(api)/./lib/utils/contentFormatter.js\");\nconst sqlite3 = (__webpack_require__(/*! sqlite3 */ \"sqlite3\").verbose)();\nconst path = __webpack_require__(/*! path */ \"path\");\nclass DatabaseSeeder {\n    constructor(){\n        this.db = getDatabase();\n        this.dbPath = path.join(process.cwd(), \"data\", \"news.db\");\n        this.contentFormatter = contentFormatter;\n    }\n    /**\n   * Check if database has any articles\n   */ async isDatabaseEmpty() {\n        return new Promise((resolve, reject)=>{\n            const db = new sqlite3.Database(this.dbPath);\n            db.get(\"SELECT COUNT(*) as count FROM articles\", [], (err, row)=>{\n                db.close();\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(row.count === 0);\n                }\n            });\n        });\n    }\n    /**\n   * Get current article count\n   */ async getArticleCount() {\n        return new Promise((resolve, reject)=>{\n            const db = new sqlite3.Database(this.dbPath);\n            db.get(\"SELECT COUNT(*) as count FROM articles\", [], (err, row)=>{\n                db.close();\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(row.count);\n                }\n            });\n        });\n    }\n    /**\n   * Check if seed articles already exist\n   */ async seedArticlesExist() {\n        return new Promise((resolve, reject)=>{\n            const db = new sqlite3.Database(this.dbPath);\n            const seedUrls = SEED_ARTICLES.map((article)=>article.url);\n            const placeholders = seedUrls.map(()=>\"?\").join(\",\");\n            db.get(`SELECT COUNT(*) as count FROM articles WHERE url IN (${placeholders})`, seedUrls, (err, row)=>{\n                db.close();\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(row.count > 0);\n                }\n            });\n        });\n    }\n    /**\n   * Seed database with sample articles\n   */ async seedDatabase() {\n        try {\n            console.log(\"\\uD83C\\uDF31 Starting database seeding process...\");\n            // Check if seed articles already exist\n            const seedExists = await this.seedArticlesExist();\n            if (seedExists) {\n                console.log(\"✅ Seed articles already exist, skipping...\");\n                return {\n                    success: true,\n                    message: \"Seed articles already exist\",\n                    articlesAdded: 0\n                };\n            }\n            const db = new sqlite3.Database(this.dbPath);\n            const insertQuery = `\n        INSERT OR IGNORE INTO articles \n        (title, content, summary, url, imageUrl, category, publishedAt, scrapedAt, \n         sourceName, sourceUrl, sourceRegion, sourceLogo, importance, countries, tags) \n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `;\n            let successCount = 0;\n            let errorCount = 0;\n            for (const article of SEED_ARTICLES){\n                try {\n                    // Apply enhanced formatting to seed article content\n                    const formattedContent = this.contentFormatter.formatArticleContent(article.content, article.title);\n                    // Apply enhanced formatting to summary\n                    const formattedSummary = this.contentFormatter.formatSummary(article.summary, 300);\n                    await new Promise((resolve, reject)=>{\n                        const values = [\n                            article.title,\n                            formattedContent || article.content,\n                            formattedSummary || article.summary,\n                            article.url,\n                            article.imageUrl,\n                            article.category,\n                            article.publishedAt,\n                            article.scrapedAt,\n                            article.sourceName,\n                            article.sourceUrl,\n                            article.sourceRegion,\n                            article.sourceLogo,\n                            article.importance,\n                            article.countries,\n                            article.tags\n                        ];\n                        db.run(insertQuery, values, function(err) {\n                            if (err) {\n                                console.error(`❌ Error inserting seed article: ${article.title}`, err.message);\n                                errorCount++;\n                                reject(err);\n                            } else {\n                                console.log(`✅ Seeded formatted article: ${article.title}`);\n                                successCount++;\n                                resolve();\n                            }\n                        });\n                    });\n                } catch (error) {\n                    continue;\n                }\n            }\n            db.close();\n            console.log(`🌱 Seeding complete: ${successCount} articles added, ${errorCount} errors`);\n            return {\n                success: true,\n                message: `Database seeded successfully with ${successCount} formatted articles`,\n                articlesAdded: successCount,\n                errors: errorCount\n            };\n        } catch (error) {\n            console.error(\"❌ Error during seeding:\", error);\n            return {\n                success: false,\n                message: \"Error seeding database\",\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Ensure database has minimum content\n   */ async ensureMinimumContent(minArticles = 8) {\n        try {\n            const currentCount = await this.getArticleCount();\n            console.log(`📊 Current database has ${currentCount} articles`);\n            if (currentCount < minArticles) {\n                console.log(`📈 Database has fewer than ${minArticles} articles, seeding...`);\n                const result = await this.seedDatabase();\n                return result;\n            } else {\n                console.log(`✅ Database has sufficient content (${currentCount} articles)`);\n                return {\n                    success: true,\n                    message: `Database has sufficient content (${currentCount} articles)`,\n                    articlesAdded: 0\n                };\n            }\n        } catch (error) {\n            console.error(\"❌ Error ensuring minimum content:\", error);\n            return {\n                success: false,\n                message: \"Error checking database content\",\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Force reseed database (for testing or reset)\n   */ async forceSeed() {\n        try {\n            console.log(\"\\uD83D\\uDD04 Force seeding database...\");\n            // Delete existing seed articles first\n            const db = new sqlite3.Database(this.dbPath);\n            const seedUrls = SEED_ARTICLES.map((article)=>article.url);\n            const placeholders = seedUrls.map(()=>\"?\").join(\",\");\n            await new Promise((resolve, reject)=>{\n                db.run(`DELETE FROM articles WHERE url IN (${placeholders})`, seedUrls, (err)=>{\n                    if (err) reject(err);\n                    else resolve();\n                });\n            });\n            db.close();\n            console.log(\"\\uD83D\\uDDD1️ Removed existing seed articles\");\n            // Now seed with fresh data\n            return await this.seedDatabase();\n        } catch (error) {\n            console.error(\"❌ Error during force seed:\", error);\n            return {\n                success: false,\n                message: \"Error force seeding database\",\n                error: error.message\n            };\n        }\n    }\n    /**\n   * Add additional seed articles for specific categories\n   */ async addCategorySeeds(category) {\n        const categoryArticles = SEED_ARTICLES.filter((article)=>article.category.toLowerCase() === category.toLowerCase());\n        if (categoryArticles.length === 0) {\n            return {\n                success: false,\n                message: `No seed articles found for category: ${category}`\n            };\n        }\n        try {\n            const db = new sqlite3.Database(this.dbPath);\n            let addedCount = 0;\n            for (const article of categoryArticles){\n                const values = [\n                    article.title,\n                    article.content,\n                    article.summary,\n                    article.url,\n                    article.imageUrl,\n                    article.category,\n                    article.publishedAt,\n                    article.scrapedAt,\n                    article.sourceName,\n                    article.sourceUrl,\n                    article.sourceRegion,\n                    article.sourceLogo,\n                    article.importance,\n                    article.countries,\n                    article.tags\n                ];\n                try {\n                    await new Promise((resolve, reject)=>{\n                        db.run(`INSERT OR IGNORE INTO articles \n               (title, content, summary, url, imageUrl, category, publishedAt, scrapedAt, \n                sourceName, sourceUrl, sourceRegion, sourceLogo, importance, countries, tags) \n               VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, values, function(err) {\n                            if (err) reject(err);\n                            else {\n                                if (this.changes > 0) addedCount++;\n                                resolve();\n                            }\n                        });\n                    });\n                } catch (error) {\n                    console.error(`Error adding category seed: ${article.title}`, error);\n                }\n            }\n            db.close();\n            return {\n                success: true,\n                message: `Added ${addedCount} seed articles for category: ${category}`,\n                articlesAdded: addedCount\n            };\n        } catch (error) {\n            console.error(\"Error adding category seeds:\", error);\n            return {\n                success: false,\n                message: \"Error adding category seeds\",\n                error: error.message\n            };\n        }\n    }\n}\nmodule.exports = DatabaseSeeder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/services/database-seeder.js\n");

/***/ }),

/***/ "(api)/./lib/services/database.js":
/*!**********************************!*\
  !*** ./lib/services/database.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst sqlite3 = (__webpack_require__(/*! sqlite3 */ \"sqlite3\").verbose)();\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs-extra */ \"fs-extra\");\nclass DatabaseService {\n    constructor(){\n        this.db = null;\n        this.init();\n    }\n    init() {\n        // Ensure data directory exists\n        const dbPath = process.env.DATABASE_PATH || \"./data/news.db\";\n        const dbDir = path.dirname(dbPath);\n        fs.ensureDirSync(dbDir);\n        // Initialize database\n        return new Promise((resolve, reject)=>{\n            this.db = new sqlite3.Database(dbPath, (err)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    console.log(\"Connected to SQLite database\");\n                    this.db.exec(\"PRAGMA journal_mode = WAL; PRAGMA foreign_keys = ON;\", (err)=>{\n                        if (err) {\n                            reject(err);\n                        } else {\n                            this.createTables().then(resolve).catch(reject);\n                        }\n                    });\n                }\n            });\n        });\n    }\n    createTables() {\n        return new Promise((resolve, reject)=>{\n            // Articles table\n            const createArticlesTable = `\n        CREATE TABLE IF NOT EXISTS articles (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          title TEXT NOT NULL,\n          content TEXT NOT NULL,\n          summary TEXT NOT NULL,\n          url TEXT UNIQUE NOT NULL,\n          source_name TEXT NOT NULL,\n          source_url TEXT NOT NULL,\n          source_logo TEXT,\n          category TEXT NOT NULL,\n          subcategory TEXT,\n          countries TEXT, -- JSON array as string\n          regions TEXT,   -- JSON array as string\n          tags TEXT,      -- JSON array as string\n          published_at DATETIME NOT NULL,\n          scraped_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          image_url TEXT,\n          author TEXT,\n          language TEXT DEFAULT 'en',\n          sentiment TEXT DEFAULT 'neutral',\n          importance INTEGER DEFAULT 5,\n          reading_time INTEGER DEFAULT 0,\n          is_active BOOLEAN DEFAULT 1,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          md_file_path TEXT -- Path to markdown file\n        )\n      `;\n            // Create indexes\n            const indexes = [\n                \"CREATE INDEX IF NOT EXISTS idx_articles_category ON articles(category)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_published_at ON articles(published_at DESC)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_source ON articles(source_name)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_url ON articles(url)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_active ON articles(is_active)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_importance ON articles(importance DESC)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_sentiment ON articles(sentiment)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_category_published ON articles(category, published_at DESC)\",\n                \"CREATE INDEX IF NOT EXISTS idx_articles_active_published ON articles(is_active, published_at DESC)\"\n            ];\n            // Execute table creation\n            this.db.exec(createArticlesTable, (err)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    // Execute index creation\n                    let indexCount = 0;\n                    const totalIndexes = indexes.length;\n                    if (totalIndexes === 0) {\n                        resolve();\n                        return;\n                    }\n                    indexes.forEach((indexSql)=>{\n                        this.db.exec(indexSql, (err)=>{\n                            if (err) {\n                                console.error(\"Error creating index:\", err);\n                            }\n                            indexCount++;\n                            if (indexCount === totalIndexes) {\n                                // Try to enable full-text search\n                                this.db.exec(`\n                  CREATE VIRTUAL TABLE IF NOT EXISTS articles_fts USING fts5(\n                    title, content, summary, tags, content='articles', content_rowid='id'\n                  )\n                `, (err)=>{\n                                    if (err) {\n                                        console.log(\"FTS not available or already exists\");\n                                    }\n                                    resolve();\n                                });\n                            }\n                        });\n                    });\n                }\n            });\n        });\n    }\n    // Article CRUD operations\n    createArticle(articleData) {\n        return new Promise((resolve, reject)=>{\n            const stmt = this.db.prepare(`\n        INSERT INTO articles (\n          title, content, summary, url, source_name, source_url, source_logo,\n          category, subcategory, countries, regions, tags, published_at,\n          image_url, author, language, sentiment, importance, reading_time, md_file_path\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n            // Store reference to database for use in callback\n            const db = this.db;\n            stmt.run([\n                articleData.title,\n                articleData.content,\n                articleData.summary,\n                articleData.url,\n                articleData.source.name,\n                articleData.source.url,\n                articleData.source.logo || null,\n                articleData.category,\n                articleData.subcategory || null,\n                JSON.stringify(articleData.countries || []),\n                JSON.stringify(articleData.regions || []),\n                JSON.stringify(articleData.tags || []),\n                articleData.publishedAt,\n                articleData.imageUrl || null,\n                articleData.author || null,\n                articleData.language || \"en\",\n                articleData.sentiment || \"neutral\",\n                articleData.importance || 5,\n                articleData.readingTime || 0,\n                articleData.mdFilePath || null\n            ], function(err) {\n                if (err) {\n                    reject(err);\n                } else {\n                    // Update FTS index - use stored db reference\n                    const ftsStmt = db.prepare(`\n            INSERT INTO articles_fts(rowid, title, content, summary, tags)\n            VALUES (?, ?, ?, ?, ?)\n          `);\n                    ftsStmt.run([\n                        this.lastID,\n                        articleData.title,\n                        articleData.content,\n                        articleData.summary,\n                        JSON.stringify(articleData.tags || [])\n                    ], (ftsErr)=>{\n                        // Don't fail if FTS insert fails\n                        if (ftsErr) {\n                            console.log(\"FTS insert failed:\", ftsErr.message);\n                        }\n                        ftsStmt.finalize();\n                        resolve({\n                            id: this.lastID,\n                            ...articleData\n                        });\n                    });\n                }\n            });\n            stmt.finalize();\n        });\n    }\n    getArticleById(id) {\n        return new Promise((resolve, reject)=>{\n            this.db.get(\"SELECT * FROM articles WHERE id = ? AND is_active = 1\", [\n                id\n            ], (err, row)=>{\n                if (err) {\n                    reject(err);\n                } else if (row) {\n                    resolve(this.parseArticle(row));\n                } else {\n                    resolve(null);\n                }\n            });\n        });\n    }\n    getArticleByUrl(url) {\n        return new Promise((resolve, reject)=>{\n            this.db.get(\"SELECT * FROM articles WHERE url = ?\", [\n                url\n            ], (err, row)=>{\n                if (err) {\n                    reject(err);\n                } else if (row) {\n                    resolve(this.parseArticle(row));\n                } else {\n                    resolve(null);\n                }\n            });\n        });\n    }\n    getArticles(filters = {}) {\n        return new Promise((resolve, reject)=>{\n            let query = \"SELECT * FROM articles WHERE is_active = 1\";\n            const params = [];\n            // Add filters\n            if (filters.category) {\n                query += \" AND category = ?\";\n                params.push(filters.category);\n            }\n            if (filters.country) {\n                query += \" AND countries LIKE ?\";\n                params.push(`%\"${filters.country}\"%`);\n            }\n            if (filters.region) {\n                query += \" AND regions LIKE ?\";\n                params.push(`%\"${filters.region}\"%`);\n            }\n            if (filters.source) {\n                query += \" AND source_name = ?\";\n                params.push(filters.source);\n            }\n            if (filters.sentiment) {\n                query += \" AND sentiment = ?\";\n                params.push(filters.sentiment);\n            }\n            if (filters.importance) {\n                query += \" AND importance >= ?\";\n                params.push(filters.importance);\n            }\n            if (filters.search) {\n                query += \" AND (title LIKE ? OR content LIKE ? OR summary LIKE ?)\";\n                const searchTerm = `%${filters.search}%`;\n                params.push(searchTerm, searchTerm, searchTerm);\n            }\n            // Add sorting\n            const sortBy = filters.sortBy || \"published_at\";\n            const sortOrder = filters.sortOrder || \"desc\";\n            query += ` ORDER BY ${sortBy} ${sortOrder.toUpperCase()}`;\n            // Add pagination\n            if (filters.limit) {\n                query += \" LIMIT ?\";\n                params.push(filters.limit);\n                if (filters.offset) {\n                    query += \" OFFSET ?\";\n                    params.push(filters.offset);\n                }\n            }\n            this.db.all(query, params, (err, rows)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(rows.map((row)=>this.parseArticle(row)));\n                }\n            });\n        });\n    }\n    countArticles(filters = {}) {\n        return new Promise((resolve, reject)=>{\n            let query = \"SELECT COUNT(*) as count FROM articles WHERE is_active = 1\";\n            const params = [];\n            // Add same filters as getArticles\n            if (filters.category) {\n                query += \" AND category = ?\";\n                params.push(filters.category);\n            }\n            if (filters.country) {\n                query += \" AND countries LIKE ?\";\n                params.push(`%\"${filters.country}\"%`);\n            }\n            if (filters.region) {\n                query += \" AND regions LIKE ?\";\n                params.push(`%\"${filters.region}\"%`);\n            }\n            if (filters.source) {\n                query += \" AND source_name = ?\";\n                params.push(filters.source);\n            }\n            if (filters.search) {\n                query += \" AND (title LIKE ? OR content LIKE ? OR summary LIKE ?)\";\n                const searchTerm = `%${filters.search}%`;\n                params.push(searchTerm, searchTerm, searchTerm);\n            }\n            this.db.get(query, params, (err, row)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(row.count);\n                }\n            });\n        });\n    }\n    getCategoryCounts() {\n        return new Promise((resolve, reject)=>{\n            this.db.all(`\n        SELECT category, COUNT(*) as count \n        FROM articles \n        WHERE is_active = 1 \n        GROUP BY category \n        ORDER BY count DESC\n      `, [], (err, rows)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(rows);\n                }\n            });\n        });\n    }\n    getCountryCounts() {\n        return new Promise((resolve, reject)=>{\n            this.db.all(`\n        SELECT countries \n        FROM articles \n        WHERE is_active = 1 AND countries IS NOT NULL AND countries != '[]'\n      `, [], (err, rows)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    const countryCounts = {};\n                    rows.forEach((row)=>{\n                        try {\n                            const countries = JSON.parse(row.countries);\n                            countries.forEach((country)=>{\n                                countryCounts[country] = (countryCounts[country] || 0) + 1;\n                            });\n                        } catch (error) {\n                        // Skip invalid JSON\n                        }\n                    });\n                    const result = Object.entries(countryCounts).map(([name, count])=>({\n                            name,\n                            count\n                        })).sort((a, b)=>b.count - a.count);\n                    resolve(result);\n                }\n            });\n        });\n    }\n    getRelatedArticles(articleId, limit = 5) {\n        return new Promise((resolve, reject)=>{\n            // First get the article to find related ones\n            this.getArticleById(articleId).then((article)=>{\n                if (!article) {\n                    resolve([]);\n                    return;\n                }\n                this.db.all(`\n          SELECT * FROM articles \n          WHERE id != ? AND is_active = 1 \n          AND (\n            category = ? OR \n            countries LIKE ? OR \n            regions LIKE ?\n          )\n          ORDER BY published_at DESC \n          LIMIT ?\n        `, [\n                    articleId,\n                    article.category,\n                    `%${article.countries[0] || \"\"}%`,\n                    `%${article.regions[0] || \"\"}%`,\n                    limit\n                ], (err, rows)=>{\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(rows.map((row)=>this.parseArticle(row)));\n                    }\n                });\n            }).catch(reject);\n        });\n    }\n    parseArticle(article) {\n        return {\n            _id: article.id,\n            id: article.id,\n            title: article.title,\n            content: article.content,\n            summary: article.summary,\n            url: article.url,\n            source: {\n                name: article.source_name,\n                url: article.source_url,\n                logo: article.source_logo\n            },\n            category: article.category,\n            subcategory: article.subcategory,\n            countries: article.countries ? JSON.parse(article.countries) : [],\n            regions: article.regions ? JSON.parse(article.regions) : [],\n            tags: article.tags ? JSON.parse(article.tags) : [],\n            publishedAt: article.published_at,\n            scrapedAt: article.scraped_at,\n            imageUrl: article.image_url,\n            author: article.author,\n            language: article.language,\n            sentiment: article.sentiment,\n            importance: article.importance,\n            readingTime: article.reading_time,\n            isActive: article.is_active,\n            createdAt: article.created_at,\n            updatedAt: article.updated_at,\n            mdFilePath: article.md_file_path\n        };\n    }\n    close() {\n        return new Promise((resolve)=>{\n            if (this.db) {\n                this.db.close((err)=>{\n                    if (err) {\n                        console.error(\"Error closing database:\", err);\n                    }\n                    resolve();\n                });\n            } else {\n                resolve();\n            }\n        });\n    }\n}\n// Singleton instance\nlet dbInstance = null;\nfunction getDatabase() {\n    if (!dbInstance) {\n        dbInstance = new DatabaseService();\n    }\n    return dbInstance;\n}\nmodule.exports = {\n    DatabaseService,\n    getDatabase\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/services/database.js\n");

/***/ }),

/***/ "(api)/./lib/utils/contentFormatter.js":
/*!***************************************!*\
  !*** ./lib/utils/contentFormatter.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nclass ContentFormatter {\n    constructor(){\n        this.paragraphMinLength = 80;\n        this.maxParagraphLength = 1200;\n        this.sentenceMinLength = 15;\n    }\n    /**\n   * Main function to clean and format article content\n   */ formatArticleContent(content, title = \"\") {\n        if (!content || typeof content !== \"string\") {\n            return null;\n        }\n        // Don't process extremely short content\n        if (content.trim().length < 50) {\n            return null;\n        }\n        let formatted = content;\n        try {\n            // Step 1: Clean URL encoding and artifacts\n            formatted = this.cleanUrlEncoding(formatted);\n            // Step 2: Remove unwanted elements\n            formatted = this.removeUnwantedElements(formatted);\n            // Step 3: Fix spacing and formatting\n            formatted = this.normalizeSpacing(formatted);\n            // Step 4: Format paragraphs properly\n            formatted = this.formatParagraphs(formatted);\n            // Step 5: Add proper sentence structure\n            formatted = this.improveSentenceFlow(formatted);\n            // Step 6: Add paragraph breaks for readability\n            formatted = this.addParagraphBreaks(formatted);\n            // Step 7: Final cleanup and polishing\n            formatted = this.finalCleanup(formatted);\n            // Step 8: Validate and ensure minimum quality\n            formatted = this.validateContent(formatted, title);\n            return formatted;\n        } catch (error) {\n            console.error(\"Error formatting content:\", error);\n            // Return null instead of throwing to prevent crashes\n            return null;\n        }\n    }\n    /**\n   * Clean URL encoding and decode special characters\n   */ cleanUrlEncoding(text) {\n        // Remove URLs with heavy encoding that are unreadable\n        text = text.replace(/https?:\\/\\/[^\\s]*%[0-9A-F]{2}[^\\s]*/gi, \"\");\n        // Remove excessive URL encoding patterns\n        text = text.replace(/%[0-9A-F]{2}/g, \"\");\n        // Decode common HTML entities\n        const entities = {\n            \"&amp;\": \"&\",\n            \"&lt;\": \"<\",\n            \"&gt;\": \">\",\n            \"&quot;\": '\"',\n            \"&#39;\": \"'\",\n            \"&#x27;\": \"'\",\n            \"&nbsp;\": \" \",\n            \"&mdash;\": \"—\",\n            \"&ndash;\": \"–\",\n            \"&hellip;\": \"…\",\n            \"&laquo;\": \"\\xab\",\n            \"&raquo;\": \"\\xbb\",\n            \"&rsquo;\": \"'\",\n            \"&lsquo;\": \"'\",\n            \"&rdquo;\": '\"',\n            \"&ldquo;\": '\"'\n        };\n        Object.keys(entities).forEach((entity)=>{\n            text = text.replace(new RegExp(entity, \"g\"), entities[entity]);\n        });\n        return text;\n    }\n    /**\n   * Remove unwanted HTML tags and elements\n   */ removeUnwantedElements(text) {\n        // Remove script and style tags and their content\n        text = text.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, \"\");\n        text = text.replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, \"\");\n        // Remove all HTML tags but keep their content\n        text = text.replace(/<[^>]*>/g, \"\");\n        // Remove comments\n        text = text.replace(/<!--[\\s\\S]*?-->/g, \"\");\n        // Remove specific navigation and website elements we've seen\n        const unwantedPatterns = [\n            /Back to Home/gi,\n            /Share this article/gi,\n            /Print this page/gi,\n            /Translate.*?\\)/gi,\n            /Copyright.*?All rights reserved.*?\\./gi,\n            /The content.*?shall not be republished.*?\\./gi,\n            /Site Search.*?Most Popular/gi,\n            /Topics Menu.*?one click away/gi,\n            /Login.*?Status/gi,\n            /Main Hubs.*?Home Pages/gi,\n            /Welcome to.*?IslamiCity/gi,\n            /Please wait.*?prepared this.*?\\.\\.\\./gi,\n            /Follow us on.*?/gi,\n            /Subscribe.*?newsletter/gi,\n            /Get AI Insights/gi,\n            /Read Original Article/gi,\n            /Visit the source.*?additional context/gi,\n            /Visit Source/gi,\n            /Related Articles?.*$/gi,\n            /Sign up.*?newsletter/gi,\n            /Click here to.*?/gi,\n            /Read more.*?/gi,\n            /_.*?_/g,\n            /MOST RECENT.*?##/gi,\n            /Most Contributing Authors.*?##/gi,\n            /Inspiring Themes.*?tour/gi\n        ];\n        unwantedPatterns.forEach((pattern)=>{\n            text = text.replace(pattern, \"\");\n        });\n        // Remove excessive exclamation marks and repeated characters\n        text = text.replace(/!{3,}/g, \".\");\n        text = text.replace(/\\.{4,}/g, \"...\");\n        text = text.replace(/\\?{2,}/g, \"?\");\n        // Remove excessive markdown symbols that might be artifacts\n        text = text.replace(/#{4,}/g, \"\");\n        text = text.replace(/\\*{3,}/g, \"\");\n        text = text.replace(/-{4,}/g, \"\");\n        // Remove URLs that are clearly navigation or ads\n        const unwantedUrls = [\n            /https?:\\/\\/[^\\s]*facebook\\.com[^\\s]*/gi,\n            /https?:\\/\\/[^\\s]*twitter\\.com[^\\s]*/gi,\n            /https?:\\/\\/[^\\s]*instagram\\.com[^\\s]*/gi,\n            /https?:\\/\\/[^\\s]*youtube\\.com[^\\s]*/gi,\n            /https?:\\/\\/[^\\s]*wp-content[^\\s]*/gi,\n            /https?:\\/\\/[^\\s]*\\.jpg[^\\s]*/gi,\n            /https?:\\/\\/[^\\s]*\\.png[^\\s]*/gi,\n            /https?:\\/\\/[^\\s]*\\.gif[^\\s]*/gi\n        ];\n        unwantedUrls.forEach((pattern)=>{\n            text = text.replace(pattern, \"\");\n        });\n        return text;\n    }\n    /**\n   * Normalize spacing and fix common formatting issues\n   */ normalizeSpacing(text) {\n        // Fix multiple spaces\n        text = text.replace(/[ \\t]+/g, \" \");\n        // Fix multiple line breaks (keep maximum of 2)\n        text = text.replace(/\\n{3,}/g, \"\\n\\n\");\n        // Fix spacing around punctuation\n        text = text.replace(/\\s+([.!?,:;])/g, \"$1\");\n        text = text.replace(/([.!?])\\s*([A-Z])/g, \"$1 $2\");\n        // Fix quotes and parentheses spacing\n        text = text.replace(/\\s+([)}\\]])/g, \"$1\");\n        text = text.replace(/([({[])\\s+/g, \"$1\");\n        // Remove extra spaces at line beginnings and ends\n        text = text.replace(/^\\s+/gm, \"\");\n        text = text.replace(/\\s+$/gm, \"\");\n        return text.trim();\n    }\n    /**\n   * Format content into proper paragraphs\n   */ formatParagraphs(text) {\n        // Split into potential paragraphs\n        let paragraphs = text.split(/\\n\\s*\\n/);\n        // Filter and clean paragraphs\n        paragraphs = paragraphs.map((p)=>p.trim()).filter((p)=>p.length > 30) // Remove very short paragraphs\n        .map((p)=>this.formatSingleParagraph(p)).filter((p)=>p && p.length > 20); // Remove empty or very short paragraphs\n        // Merge very short paragraphs with the next one\n        const mergedParagraphs = [];\n        for(let i = 0; i < paragraphs.length; i++){\n            const current = paragraphs[i];\n            const next = paragraphs[i + 1];\n            if (current.length < this.paragraphMinLength && next && current.length + next.length < this.maxParagraphLength) {\n                paragraphs[i + 1] = current + \" \" + next;\n            } else {\n                mergedParagraphs.push(current);\n            }\n        }\n        return mergedParagraphs.join(\"\\n\\n\");\n    }\n    /**\n   * Format a single paragraph\n   */ formatSingleParagraph(paragraph) {\n        // Remove any remaining HTML artifacts\n        paragraph = paragraph.replace(/&[a-zA-Z0-9#]{2,8};/g, \" \");\n        // Fix sentence spacing and capitalization\n        paragraph = paragraph.replace(/\\.\\s*([a-z])/g, (match, letter)=>\". \" + letter.toUpperCase());\n        paragraph = paragraph.replace(/\\?\\s*([a-z])/g, (match, letter)=>\"? \" + letter.toUpperCase());\n        paragraph = paragraph.replace(/!\\s*([a-z])/g, (match, letter)=>\"! \" + letter.toUpperCase());\n        // Ensure paragraph starts with capital letter\n        if (paragraph.length > 0) {\n            paragraph = paragraph.charAt(0).toUpperCase() + paragraph.slice(1);\n        }\n        // Ensure paragraph ends with proper punctuation\n        if (paragraph.length > 50 && !/[.!?]$/.test(paragraph.trim())) {\n            paragraph = paragraph.trim() + \".\";\n        }\n        return paragraph.trim();\n    }\n    /**\n   * Improve sentence flow and readability\n   */ improveSentenceFlow(text) {\n        // Split into sentences\n        let sentences = text.split(/(?<=[.!?])\\s+/).filter((s)=>s.trim().length > this.sentenceMinLength);\n        // Remove duplicate sentences\n        const uniqueSentences = [];\n        const seenSentences = new Set();\n        for (const sentence of sentences){\n            const normalized = sentence.toLowerCase().replace(/\\s+/g, \" \").trim();\n            if (!seenSentences.has(normalized) && sentence.trim().length > this.sentenceMinLength) {\n                seenSentences.add(normalized);\n                uniqueSentences.push(sentence.trim());\n            }\n        }\n        return uniqueSentences.join(\" \");\n    }\n    /**\n   * Add proper paragraph breaks for better readability\n   */ addParagraphBreaks(text) {\n        // Split long blocks of text into readable paragraphs\n        const sentences = text.split(/(?<=[.!?])\\s+/);\n        const paragraphs = [];\n        let currentParagraph = [];\n        let currentLength = 0;\n        for (const sentence of sentences){\n            if (currentLength + sentence.length > this.maxParagraphLength && currentParagraph.length > 0) {\n                paragraphs.push(currentParagraph.join(\" \"));\n                currentParagraph = [\n                    sentence\n                ];\n                currentLength = sentence.length;\n            } else {\n                currentParagraph.push(sentence);\n                currentLength += sentence.length;\n            }\n        }\n        if (currentParagraph.length > 0) {\n            paragraphs.push(currentParagraph.join(\" \"));\n        }\n        return paragraphs.filter((p)=>p.trim().length > 50).join(\"\\n\\n\");\n    }\n    /**\n   * Final cleanup and formatting\n   */ finalCleanup(text) {\n        // Remove any remaining markdown artifacts\n        text = text.replace(/\\[.*?\\]\\(.*?\\)/g, \"\"); // Remove markdown links\n        text = text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\"); // Remove bold markdown\n        text = text.replace(/\\*(.*?)\\*/g, \"$1\"); // Remove italic markdown\n        text = text.replace(/`(.*?)`/g, \"$1\"); // Remove code markdown\n        // Fix common formatting issues\n        text = text.replace(/\\s+/g, \" \"); // Normalize all whitespace\n        text = text.replace(/\\n{3,}/g, \"\\n\\n\"); // Max 2 line breaks\n        // Remove common website footer text\n        text = text.replace(/All rights reserved.*$/gi, \"\");\n        text = text.replace(/Copyright.*$/gi, \"\");\n        // Ensure proper paragraph spacing\n        text = text.replace(/\\n\\n+/g, \"\\n\\n\");\n        return text.trim();\n    }\n    /**\n   * Validate and ensure minimum content quality\n   */ validateContent(text, title = \"\") {\n        // Ensure minimum length\n        if (text.length < 200) {\n            return null; // Content too short\n        }\n        // Check for meaningful content (not just navigation or ads)\n        const meaningfulWords = [\n            \"said\",\n            \"according\",\n            \"reported\",\n            \"announced\",\n            \"stated\",\n            \"explained\",\n            \"revealed\",\n            \"confirmed\",\n            \"shows\",\n            \"indicates\"\n        ];\n        const hasMeaningfulContent = meaningfulWords.some((word)=>text.toLowerCase().includes(word));\n        if (!hasMeaningfulContent && text.length < 500) {\n            return null; // Likely not a real article\n        }\n        // Remove title repetition at the beginning\n        if (title && text.toLowerCase().startsWith(title.toLowerCase())) {\n            text = text.substring(title.length).trim();\n        }\n        // Ensure content starts properly\n        if (text.length > 0) {\n            text = text.charAt(0).toUpperCase() + text.slice(1);\n        }\n        return text;\n    }\n    /**\n   * Format title for better display\n   */ formatTitle(title) {\n        if (!title) return \"\";\n        let formatted = this.cleanUrlEncoding(title);\n        formatted = this.removeUnwantedElements(formatted);\n        formatted = formatted.replace(/\\s+/g, \" \").trim();\n        // Remove common prefixes/suffixes that might be artifacts\n        formatted = formatted.replace(/^(.*?)\\s*[-–|]\\s*(.*)$/, \"$1\");\n        formatted = formatted.replace(/\\.\\.\\.$/, \"\");\n        return formatted;\n    }\n    /**\n   * Format summary for better display\n   */ formatSummary(summary, maxLength = 300) {\n        if (!summary || typeof summary !== \"string\") return \"\";\n        let formatted = this.cleanUrlEncoding(summary);\n        formatted = this.removeUnwantedElements(formatted);\n        formatted = this.normalizeSpacing(formatted);\n        // Ensure we have content after cleaning\n        if (!formatted || formatted.trim().length === 0) {\n            return \"\";\n        }\n        // Truncate if too long\n        if (formatted.length > maxLength) {\n            const truncated = formatted.substring(0, maxLength);\n            const lastSentence = truncated.lastIndexOf(\".\");\n            if (lastSentence > maxLength * 0.7) {\n                formatted = truncated.substring(0, lastSentence + 1);\n            } else {\n                formatted = truncated.trim() + \"...\";\n            }\n        }\n        return formatted;\n    }\n    /**\n   * Check if text is primarily Arabic\n   */ isArabicText(text) {\n        if (!text || typeof text !== \"string\") return false;\n        const arabicRegex = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/;\n        const arabicChars = text.match(arabicRegex);\n        return arabicChars && arabicChars.length > text.length * 0.3;\n    }\n    /**\n   * Format content specifically for Arabic text\n   */ formatArabicContent(content) {\n        let formatted = this.formatArticleContent(content);\n        // Add RTL direction hint for Arabic content\n        if (this.isArabicText(formatted)) {\n            // Ensure proper Arabic spacing\n            formatted = formatted.replace(/\\u200C/g, \"\"); // Remove zero-width non-joiners\n            formatted = formatted.replace(/\\u200D/g, \"\"); // Remove zero-width joiners\n            formatted = formatted.replace(/[\\u0600-\\u06FF]\\s+(?=[\\u0600-\\u06FF])/g, (match)=>{\n                return match.replace(/\\s+/g, \" \");\n            });\n        }\n        return formatted;\n    }\n    /**\n   * Generate reading time estimate\n   */ calculateReadingTime(content, wordsPerMinute = 200) {\n        if (!content) return 1;\n        const cleanContent = this.formatArticleContent(content);\n        // Handle case where formatArticleContent returns null\n        if (!cleanContent) {\n            // Fallback to using original content for word count\n            const wordCount = content.split(/\\s+/).filter((word)=>word.length > 0).length;\n            return Math.max(1, Math.ceil(wordCount / wordsPerMinute));\n        }\n        const wordCount = cleanContent.split(/\\s+/).filter((word)=>word.length > 0).length;\n        return Math.max(1, Math.ceil(wordCount / wordsPerMinute));\n    }\n    /**\n   * Extract the first meaningful paragraph as a preview\n   */ extractPreview(content, maxLength = 200) {\n        if (!content) return \"\";\n        const formatted = this.formatArticleContent(content);\n        // Handle case where formatArticleContent returns null\n        if (!formatted) {\n            // Fallback to using original content\n            return this.formatSummary(content.substring(0, maxLength * 2), maxLength);\n        }\n        const paragraphs = formatted.split(\"\\n\\n\");\n        for (const paragraph of paragraphs){\n            if (paragraph.trim().length > 50) {\n                return this.formatSummary(paragraph, maxLength);\n            }\n        }\n        return this.formatSummary(formatted, maxLength);\n    }\n}\n// Export singleton instance\nconst contentFormatter = new ContentFormatter();\nmodule.exports = {\n    ContentFormatter,\n    contentFormatter,\n    // Utility functions for easy import\n    formatContent: (content)=>contentFormatter.formatArticleContent(content),\n    formatTitle: (title)=>contentFormatter.formatTitle(title),\n    formatSummary: (summary, maxLength)=>contentFormatter.formatSummary(summary, maxLength),\n    isArabicText: (text)=>contentFormatter.isArabicText(text),\n    calculateReadingTime: (content)=>contentFormatter.calculateReadingTime(content),\n    extractPreview: (content, maxLength)=>contentFormatter.extractPreview(content, maxLength)\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/utils/contentFormatter.js\n");

/***/ }),

/***/ "(api)/./pages/api/news/index.js":
/*!*********************************!*\
  !*** ./pages/api/news/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst { getDatabase } = __webpack_require__(/*! ../../../lib/services/database */ \"(api)/./lib/services/database.js\");\nconst { appInitializer } = __webpack_require__(/*! ../../../lib/services/app-initializer */ \"(api)/./lib/services/app-initializer.js\");\n// Helper function to detect Arabic text - updated to be less aggressive\nfunction containsArabic(text) {\n    if (!text) return false;\n    // Arabic Unicode range: U+0600 to U+06FF and U+0750 to U+077F\n    const arabicRegex = /[\\u0600-\\u06FF\\u0750-\\u077F]/g;\n    const arabicMatches = text.match(arabicRegex);\n    // Only consider it Arabic if more than 30% of the content is Arabic characters\n    if (!arabicMatches) return false;\n    const arabicRatio = arabicMatches.length / text.length;\n    return arabicRatio > 0.3;\n}\n// Helper function to check if content is primarily English\nfunction isPrimarilyEnglish(text) {\n    if (!text || typeof text !== \"string\" || text.length < 50) return true; // Assume short text is English\n    // Check for English words and patterns\n    const englishWords = text.match(/\\b[a-zA-Z]+\\b/g);\n    const totalWords = text.split(/\\s+/).length;\n    if (!englishWords || totalWords === 0) return false;\n    const englishRatio = englishWords.length / totalWords;\n    return englishRatio > 0.7; // More than 70% English words\n}\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const db = getDatabase();\n        // Auto-initialize database if needed (ensures website always has content)\n        const appStatus = await appInitializer.isAppReady();\n        if (!appStatus.ready || appStatus.articleCount < 5) {\n            console.log(\"\\uD83D\\uDCCA Database needs content, auto-initializing...\");\n            await appInitializer.initialize();\n        }\n        const { page = 1, limit = 20, category, country, region, search, sortBy = \"published_at\", sortOrder = \"desc\", importance, sentiment, source, language = \"en\" // Default to English only\n         } = req.query;\n        // Build filter object\n        const filters = {};\n        if (category) {\n            filters.category = category;\n        }\n        if (country) {\n            filters.country = country;\n        }\n        if (region) {\n            filters.region = region;\n        }\n        if (importance) {\n            filters.importance = parseInt(importance);\n        }\n        if (sentiment) {\n            filters.sentiment = sentiment;\n        }\n        if (source) {\n            filters.source = source;\n        }\n        if (search) {\n            filters.search = search;\n        }\n        // Add language filter - only return English articles\n        filters.language = language;\n        // Add pagination\n        const pageNum = parseInt(page);\n        const limitNum = parseInt(limit);\n        filters.limit = limitNum;\n        filters.offset = (pageNum - 1) * limitNum;\n        filters.sortBy = sortBy;\n        filters.sortOrder = sortOrder;\n        // Execute queries\n        const [articles, totalCount] = await Promise.all([\n            db.getArticles(filters),\n            db.countArticles(filters)\n        ]);\n        // Additional filtering to remove any Arabic content that might have slipped through\n        const englishOnlyArticles = articles.filter((article)=>{\n            // Use the improved English detection instead of just checking for Arabic\n            const titleIsEnglish = isPrimarilyEnglish(article.title);\n            const summaryIsEnglish = isPrimarilyEnglish(article.summary);\n            // Keep articles that have primarily English title and summary\n            return titleIsEnglish && summaryIsEnglish;\n        });\n        // Remove content for list view to reduce payload size\n        const articlesWithoutContent = englishOnlyArticles.map((article)=>{\n            const { content, ...articleWithoutContent } = article;\n            return articleWithoutContent;\n        });\n        const totalPages = Math.ceil(englishOnlyArticles.length / limitNum);\n        res.status(200).json({\n            success: true,\n            data: {\n                articles: articlesWithoutContent,\n                pagination: {\n                    currentPage: pageNum,\n                    totalPages,\n                    totalCount: englishOnlyArticles.length,\n                    hasNextPage: pageNum < totalPages,\n                    hasPrevPage: pageNum > 1\n                }\n            }\n        });\n    } catch (error) {\n        console.error(\"Error fetching news:\", error);\n        res.status(500).json({\n            success: false,\n            message: \"Error fetching news articles\",\n            error: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/news/index.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fnews&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fnews%2Findex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();